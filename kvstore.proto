syntax = "proto3";

package kvstore;

message GetRequest {
  string key = 1;
}

message GetResponse {
  string value = 1;
  bool found = 2;
  uint64 version = 3;  // Added for conflict resolution
}

message PutRequest {
  string key = 1;
  string value = 2;
  uint64 version = 3;  // Added versioning for conflict resolution
}

message PutResponse {
  string old_value = 1;
  bool old_value_found = 2;
  uint64 version = 3;  // Return version for the key
}

message DeleteRequest {
  string key = 1;
}

message DeleteResponse {
  bool success = 1;
}

message BatchGetRequest {
  repeated string keys = 1;
}

message BatchGetResponse {
  map<string, GetResponse> results = 1;
}

message BatchPutRequest {
  map<string, string> key_values = 1;
}

message BatchPutResponse {
  map<string, PutResponse> results = 1;
}

// New message types for the Die functionality
message DieRequest {
  bool clean = 1; // Added clean field to indicate the shutdown type
  string message = 2; // Optional message to send during die
}

message DieResponse {
  bool success = 1;
  string message = 2; // Optional message on die
}

// New message types for the Ping functionality
message PingRequest {
}

message PingResponse {
  bool is_alive = 1; // if the master is alive
}

message UpdateTailRequest {
  int32 tail_port = 1; // port of the new tail
}
message UpdateTailResponse {
  bool success = 1;
}

service KVStore {
  rpc Get(GetRequest) returns (GetResponse);
  rpc Put(PutRequest) returns (PutResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc BatchGet(BatchGetRequest) returns (BatchGetResponse);
  rpc BatchPut(BatchPutRequest) returns (BatchPutResponse);
  rpc PutToNext(PutRequest) returns (PutResponse);  // To forward Put requests to the next node in the chain
  // New Die RPC method
  rpc Die(DieRequest) returns (DieResponse);
  
  // New Ping RPC method
  rpc Ping(PingRequest) returns (PingResponse);
  rpc UpdateTail(UpdateTailRequest) returns (UpdateTailResponse);
  rpc UpdateHead(UpdateTailRequest) returns (UpdateTailResponse);
  rpc ForwardToNext(PutRequest) returns (PutResponse);
}


message GetHeadRequest{
  bool replace = 1;
}
message GetHeadResponse{
  int32 port = 1; 
  string hostname = 2; // not needed for p2 running on localhost
}
message GetTailRequest{
  bool replace = 1;
}
message GetTailResponse{
  int32 port = 1;
  string hostname = 2; // not needed for p2 running on localhost
}
message GetHeartBeatRequest{
  bool is_alive = 1; // whether the child is alive
}
message GetHeartBeatResponse{
  bool is_alive = 1;
}
service MasterNode {
  rpc GetHead(GetHeadRequest) returns (GetHeadResponse);
  rpc GetTail(GetTailRequest) returns (GetTailResponse);
  rpc GetHeartBeat(GetHeartBeatRequest) returns (GetHeartBeatResponse);
}
